
use clap::Parser;
use chrono_systemd_time::parse_timestamp_tz;
use chrono::{Local, Utc};
use std::process::exit;
use regex::Regex;
/// If the input looks like a joined special token and offset (e.g. "now-1hr"), print a hint
fn print_heuristic_hint(input: &str) {
    // List of special keywords from systemd.time spec
    let keywords = ["now", "today", "yesterday", "tomorrow"];
    // Regex: ^(now|today|yesterday|tomorrow)[+-]
    let re = Regex::new(r"^(now|today|yesterday|tomorrow)[+-]").unwrap();
    if re.is_match(input) {
        let this = &re.captures(input).unwrap()[1];
        let suggestion = format!("{} {}", this, &input[this.len()..]);
        eprintln!("\nhint: You wrote %s, which uses a special token (%s) with an attached offset. Per systemd.time specification, a space is required after '{this}'.\n      Try writing: %s.\n      For more details, see 'systemd.time(7)' or ./planning/systemd-time-spec.txt\n", suggestion, input, this);
    }
}

#[derive(Parser)]
#[clap(author, version, about, long_about = None)]
struct Args {
    /// Timestamp specification following systemd.time format
    timespec: String,

    /// Output UTC time instead of local time
    #[clap(long)]
    utc: bool,

    /// Format string for output (default: "%Y-%m-%d %H:%M:%S")
    #[clap(long, default_value = "%Y-%m-%d %H:%M:%S")]
    format: String,
}

fn main() {
    let args = Args::parse();

    if args.utc {
        match parse_timestamp_tz(&args.timespec, Utc) {
            Ok(parsed) => {
                println!("{}", parsed.format(&args.format));
            }
            Err(e) => {
                eprintln!("Error parsing time: {}", e);
                print_heuristic_hint(&args.timespec);
                exit(1);
            }
        }
    } else {
        match parse_timestamp_tz(&args.timespec, Local) {
            Ok(parsed) => {
                println!("{}", parsed.format(&args.format));
            }
            Err(e) => {
                eprintln!("Error parsing time: {}", e);
                print_heuristic_hint(&args.timespec);
                exit(1);
            }
        }
    }
}